
{#
  Top-level rendering of a DeclarationReflection from TypeDoc.
#}
{% macro renderTopLevel(node, prefix) %}

  {% set type = node.type %}

<div class="type stack">
  <h3 id="{{ prefix }}-{{ node.name }}">{{ node.name }}</h3>

{# Render the function signature. #}
{% if type.kindString === 'Function' %}
  {# {{ renderTypeSignature(prop) }} #}
{% elif node._event %}
  {% if node._event.addListenerParameters %}
    {# This isn't really part of the type but we show users how to add a listener. #}
    <div class="type--label">
      <code>
        {{ node.name }}.addListener{{ renderFunctionParameters(node._event.addListenerParameters) }}
      </code>
    </div>
  {% else %}
    {# This is a declarative event listener as it has no listener function type. #}
    <p>
      Provides the <a href="/docs/extensions/reference/events/#declarative-event-handlers">Declarative Event API</a> consisting of <code>addRules</code>, <code>removeRules</code>, and <code>getRules</code>.
    </p>
  {% endif %}
{% endif %}

  {{ renderComment(node) }}
</div>

{% if type.type === 'literal' %}
  {# Top-level literal number or string. #}
  <div class="code-sections">
    <h4 class="type--label code-sections__mode">Value</h4>

    <div class="code-sections__overline code-sections__label">
      {{ renderSingleIconType(type) }}
    </div>
  </div>
{% elif type.type === 'intrinsic' %}
  {# Intrinsic type, like 'number' #}
  {{ renderIconTypesArray([type], 'Type') }}

{% elif type.type === 'union' %}
  {# Type that contains many string (probably) options, basically an enum. #}
  {{ renderIconTypesArray(type.types, 'Type') }}

{% endif %}

{% endmacro %}


{#
  Renders a single type with its icon.
#}
{% macro renderSingleIconType(type) %}
  {% set iconType = type.type %}
  {% if type.type === 'intrinsic' %}
    {% set iconType = type.name %}
  {% elif type.type === 'literal' %}
    {% set iconType = type.value | typeof %}
  {% elif type.type === 'reflection' and type.declaration.signatures %}
    {% set iconType = 'function' %}
  {% elif type.type === 'reference' %}
    {% set iconType = 'object' %}
  {% endif %}

  {# Note that we avoid whitespace below, and instead set margins in CSS. #}
  <span class="code-sections__icon code-sections__icon--{{ iconType }}">{{ renderSingleType(type) }}</span>

{% endmacro %}


{#
  Top-level rendering of a model.Type. This is needed as we recurse for union types.
#}
{% macro renderTopType(type) %}

  {% if not type %}
    {# This should probably never happen. #}

  {% elif type.type === 'union' %}
    {# Type that contains many string (probably) options, basically an enum. #}
    {# {{ renderIconTypesArray(type.choices, 'Enum', prop) }} #}

  {% elif type.type === 'reflection' and type.declaration.signatures %}
    {# Top-level namespace function. #}

    {# {% if type.isReturnsAsync %}
      {{ renderOptionalParametersSection(type.parametersForAsync, 'Parameters') }}

      <div class="code-sections">
        <h4 class="type--label code-sections__mode">Result</h4>

        <ul class="stack">
          <li class="stack">
            <div>
              <div class="code-sections__label">return/callback</div>
              <div class="type--xsmall code-sections__icon code-sections__icon--function">async</span></div>
            </div>

            {% set returnParameters = type.callbackForAsync.type.parameters %}

            <div class="type stack">
              {{ renderComment(type.callbackForAsync) }}
              <p>
                The <code>{{ prop.name }}</code> method provides its result via callback or returned as a <code>Promise</code> (MV3 only).
                {% if not returnParameters.length %}
                  It has no parameters.
                {% endif %}
              </p>
            </div>

            {{ renderOptionalParametersSection(returnParameters) }}
          </li>
        </ul>
      </div>

    {% else %}
      {{ renderOptionalParametersSection(type.parameters, 'Parameters') }}
      {% if type.returnProperty and type.returnType.primitiveType !== 'void' %}
        <div class="code-sections">
          <h4 class="type--label code-sections__mode">Returns</h4>

          <ul class="stack">
            {{ internalRenderParameter(type.returnProperty) }}
          </ul>
        </div>
      {% endif %}
    {% endif %} #}

  {% elif type.key === 'ref' and type.name === 'events.Event' %}
    {# Top-level event variable. #}

    {% if type.templates[0].primitiveType === 'void' %}
      {{ renderIconTypesArray(type.templates[1].choices, 'Conditions', prop) }}
      {{ renderIconTypesArray(type.templates[2].choices, 'Actions', prop) }}
    {% else %}
      <div class="code-sections">
        <h4 class="type--label code-sections__mode">Event</h4>
        <ul class="stack">
          {{ internalRenderListenerAsItem(type.templates[0]) }}
        </ul>
      </div>
    {% endif %}

  {% elif type.key === 'literal' %}
    {# Top-level literal number or string. #}
    <div class="code-sections">
      <h4 class="type--label code-sections__mode">Value</h4>

      <div class="code-sections__overline code-sections__label">
        {{ renderSingleType(type, prop) }}
      </div>
    </div>

  {% elif type.key === 'union' and not prop.isType %}
    {# Union of many things as a non-type. #}

    {% for type in type.types %}
      {{ renderTopType(type, prop) }}
    {% endfor %}

  {% elif type.key === 'object' %}
    {# Object with properties. #}

    {% if type.properties | length %}
      <div class="code-sections">
        <h4 class="type--label code-sections__mode">Properties</h4>

        <ul class="stack">
          {% for name, prop in type.properties | dictsort %}
            {{ internalRenderParameter(prop) }}
          {% endfor %}
        </ul>
      </div>
    {% endif %}

  {% else %}
    {# Some other kind of type. #}

    <div class="code-sections">
      <h4 class="type--label code-sections__mode">Type</h4>

      <div class="code-sections__overline code-sections__label">
        {{ renderSingleType(type, prop) }}
      </div>
    </div>

  {% endif %}

{% endmacro %}

{#
  Renders an optional list of parameters.
#}
{% macro renderOptionalParametersSection(parameters, label) %}

  {% if parameters.length %}
    <div class="code-sections">
      {% if label %}
        <h4 class="type--label code-sections__mode">{{ label }}</h4>
      {% endif %}

      <ul class="stack">
        {% for parameter in parameters %}
          {{ internalRenderParameter(parameter) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}

{% endmacro %}

{#
  Renders an optional list of types, e.g., for an enum.
#}
{% macro renderIconTypesArray(types, label) %}

  <div class="code-sections">
    {% if label %}
      <h4 class="type--label code-sections__mode">{{ label }}</h4>
    {% endif %}

    <div class="code-sections__overline code-sections__label">
      <p>
        {% for t in types %}
          {% if loop.last and not loop.first %}or{% endif %}
          <span style="white-space: nowrap">
            {{ renderSingleIconType(t) | trim }}{% if not loop.last %},{% endif %}
          </span>
        {% endfor %}
      </p>
    </div>
  </div>

{% endmacro %}

{#
  Renders a comment, its optional availability information and deprecation notice.
#}
{% macro renderComment(node) %}
  {{ renderAvailability(node, 'pad-top-200') }}

  {% set f = node._feature %}
  {% if f.deprecated.value %}
    <p class="code-sections__deprecated">{{ f.deprecated.value | mdInline | safe }}<p>
  {% endif %}

  {# This |md filter will add <p> as appropriate. #}
  {{ node.comment.shortText | md | safe }}
  {{ node.comment.text | md | safe }}

  {# Display enum information from Chrome's source. #}
  {% set enumInfoHtml %}
    {% for tag in node.comment.tags %}
      {% if tag.tag === 'chrome-enum' %}
        {# TODO: appears as `"foo" description #}
        <li>{{ tag.text | md | safe }}</li>
      {% endif %}
    {% endfor %}
  {% endset %}
  {% if enumInfoHtml | trim %}
    <ul>{{ enumInfoHtml | safe }}</ul>
  {% endif %}

{% endmacro %}

{#
  Renders a <li> based on a callback/listener model.FunctionType. Used by events on top-level and
  as part of interfaces.
#}
{% macro internalRenderListenerAsItem(listenerType, name = 'listener') %}
  <li class="stack">
    <div>
      <div class="code-sections__label">{{ name }}</div>
      <div class="type--xsmall code-sections__icon code-sections__icon--function">function</span></div>
    </div>

    <div class="type stack">
      <p>
        The {{ name }} parameter should be a function that looks like this:
      </p>
    </div>

    <div class="code-sections__callback type--xsmall"><code>{{ renderFunctionParameters(listenerType.parameters) }} => {...}</code></div>

    {{ renderOptionalParametersSection(listenerType.parameters) }}
  </li>
{% endmacro %}

{#
  Renders a <li> with the type's name and description. This is used for parts of a top-level type.
#}
{% macro internalRenderParameter(prop) %}
  {% set type = prop.type %}

<li class="stack">
  <div>
    <div class="code-sections__label">{{ prop.name }}</div>
    <div class="type--xsmall">{{ renderSingleType(prop.type, prop) }}</div>
  </div>

{% set description %}
  {{ renderComment(prop) }}

  {% if type.key === 'function' and (prop.name === 'callback' or prop.name === 'listener') %}
    {# This is a callback or a listener. Tell the user how to specify it. #}
    <p>
      {% if prop.optional %}
        If you specify the {{ spec.name }} parameter, it
      {% else %}
        The {{ spec.name }} parameter
      {% endif %}
      should be a function that looks like this:
    </p>
    {% set functionPart %}
      {{ renderFunctionParameters(type.parameters) }} => {...}
    {% endset %}
  {% elif type.key === 'function' %}
    {# This is a function, often given to the user. It's ambiguous how it will
       be called, so just show its signature. #}
    <p>
      The {{ prop.name }} function looks like this:
    </p>
    {% set functionPart %}
      {{ prop.name }}{{ renderFunctionParameters(type.parameters) }} => {...}
    {% endset %}
  {% endif %}
{% endset %}

{% set description = description | trim %}
{% if description %}
  <div class="type stack code-sections__description">{{ description | safe }}</div>
{% endif %}

{% if functionPart %}
  <div class="code-sections__callback type--xsmall"><code>{{ functionPart | safe }}</code></div>
{% endif %}

{# OPTION: array #}
{% if type.key === 'sequence' %}
  {# Render further information about the contained type. #}
  {% set type = type.itemType %}
{% endif %}

{# OPTION: type (class) or object (property) #}
{% if type.key === 'object' %}
  {% if type.properties | length %}
    <div class="code-sections">
      <ul class="stack">
        {% for name, prop in type.properties | dictsort %}
          {{ internalRenderParameter(prop) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}

{# OPTION: function #}
{% elif type.key === 'function' %}
  {% if type.parameters.length or type.returnType.primitiveType !== 'void' %}
    <div class="code-sections">
      <ul class="stack">
        {% for parameter in type.parameters %}
          {{ internalRenderParameter(parameter) }}
        {% endfor %}
        {% if type.returnType.primitiveType !== 'void' %}
          {{ internalRenderParameter(type.returnProperty) }}
        {% endif %}
      </ul>
    </div>
  {% endif %}

{# OPTION: event #}
{% elif type.key === 'ref' and type.name === 'events.Event' %}
  <div class="code-sections">
    <ul class="stack">
      {{ internalRenderListenerAsItem(type.templates[0]) }}
    </ul>
  </div>

{% endif %}

</li>
{% endmacro %}

{#
  Renders a single model.Type as a single word. Used for signatures and type hints.
#}
{% macro renderSingleType(type) %}
  {% set iconType = type.type %}

  {% if not type %}
    {# Should never happen #}
    ?

  {% elif type.type === 'intrinsic' %}
    {# Primitive type, e.g. "number" or "void" #}
    {{ type.name }}

  {% elif type.type === 'literal' %}
    {# Literal value, e.g., 123 or '"foo"' #}
    <span class="code-sections__value">{{ type.value | dump }}</span>

  {% elif type.type === 'reflection' and type.declaration.signatures %}
    {# A reflection which has signatures, i.e., a function. #}
    function

  {% elif type.type === 'reference' %}
    {# Reference to another type (internal or external) #}

    {% set link = type.name | modelToHref %}
    {% if link %}
      <a href="{{ link }}">{{ type.name }}</a>
    {%- else %}
      {{ type.name }}
    {%- endif %}

    {%- if type.typeArguments.length -%}
      &lt;
        {%- for t in type.typeArguments -%}
          {{ renderSingleType(t) | trim }}
        {%- endfor -%}
      &gt;
    {% endif %}

  {% elif type.type === 'array' %}
    {% set inner %}{{ renderSingleType(type.itemType) | trim }}{% endset %}

    {% if type.elementType.type === 'intersection' or type.elementType.type === 'union' %}
      {# This is an array of something which itself needs wrapping. #}
      ({{ inner }})[]
    {% else %}
      {# This is an array of a boring type. #}
      {{ inner }}[]
    {% endif %}

  {% elif type.type === 'intersection' %}
    {# A number of choices with `|` #}
    {%- for t in type.types -%}
      {{ renderSingleType(t) | trim }}{%- if not loop.last %} | {% endif -%}
    {%- endfor -%}

  {% elif type.type === 'union' %}
    {# A number of choices with `&` #}
    {%- for t in type.types -%}
      {{ renderSingleType(t) | trim }}{%- if not loop.last %} & {% endif -%}
    {%- endfor -%}

  {% else %}
    {# This is a fallback display but won't render a sensible type that looks like TS. #}
    {{ type.type }}
  {% endif %}

{% endmacro %}

{#
  If the passed model.Property is a function, then render its full signature. Does nothing otherwise.
#}
{% macro renderTypeSignature(prop) %}

  {% if prop.type.key === 'function' %}
    {% set type = prop.type %}
    <div class="type--label">
      {% if type.isReturnsAsync %}
        <code>
          {{ prop.name }}{{ renderFunctionParameters(type.parametersForAsync) }}:
          {{ renderSingleType(type.returnTypeForAsync) }}
        </code><br />
      {% endif %}
      <code>
        {{ prop.name }}{{ renderFunctionParameters(type.parameters) }}:
        {{ renderSingleType(type.returnType) }}
      </code>
    </div>
  {% endif %}

{% endmacro %}

{#
  Renders the arguments of a method including ()'s. Expects typedoc.JSONOutput.ParameterReflection[].
#}
{% macro renderFunctionParameters(parameters) -%}
  (
    {%- for p in parameters -%}
      {{ p.name }}{% if p.flags.isOptional %}?{% endif %}:
      <span class="color-cyan-medium">{{ renderSingleType(p.type) | trim }}</span>
      {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
  )
{%- endmacro %}

{#
  Renders a short summary of the passed RenderGroup. Used in the summary section of a namespace.
#}
{% macro renderGroupSummary(group) %}
  <li>
    <div class="code-sections__label">{{ group.title }}</div>
    <div>
      {% for node in group.contents %}
        <div><a href="#{{ group.prefix }}-{{ node.name }}" class="link weight-medium">{{ node.name }}</a></div>
      {% endfor %}
    </div>
  </li>
{% endmacro %}

{#
  Renders the contents of the passed group, including heading.
#}
{% macro renderGroupAll(group) %}

  <h2 class="type--h3" id="{{ group.prefix }}">{{ group.title }}</h2>
  <div class="stack flow-space-300">
  {% for node in group.contents %}
    {{ renderTopLevel(node, group.prefix) }}
  {% endfor %}
  </div>

{% endmacro %}

{#
  Renders API availability information based on feature information (this is type `ExtendedDeclarationReflection`).
  This is used for both top-level namespaces as well as specific APIs. This does not render
  permissions.

  This returns valid HTML, so it should be rendered with `| safe`.
#}
{% macro renderAvailability(ext, extraClass) %}
  {% set feature = ext._feature %}

  {% set inner %}
    {# TODO: expand #}
    {% if ext.type.isReturnsAsync %}
      <span class="aside--success tag-pill type--label rounded-lg" title="Can return its result via Promise">
        Promise
      </span>
    {% endif %}

    {% if feature.channel === 'dev' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Dev channel
      </span>
    {% elif feature.channel === 'beta' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Beta channel
      </span>
    {% elif feature.channel === 'canary' or feature.channel === 'trunk' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        In development
      </span>
    {% elif feature.since and feature.since.startsWith('Chrome') %}
      <span class="aside--default tag-pill type--label rounded-lg" title="Available from this Chrome version and higher">
        {{ feature.since }}+
      </span>
    {% elif feature.since %}
      {# This is stable but not yet visible in the version history data. It's probably coming next
        Chrome release. #}
      <span class="aside--warning tag-pill type--label rounded-lg" title="Availability data">
        {{ feature.since }}
      </span>
    {% endif %}

    {% if feature.chromeOsOnly %}
      <span class="aside--key-term tag-pill type--label rounded-lg">
        Chrome OS only
      </span>
    {% endif %}

    {% if feature.maxManifest %}
      <span class="aside--caution tag-pill type--label rounded-lg" title="Maximum manifest vesion">
        &leq;{{ feature.maxManifest }}
      </span>
    {% endif %}
    {% if feature.minManifest %}
      <span class="aside--gotchas tag-pill type--label rounded-lg" title="Minimum manifest version">
        {{ feature.minManifest }}+
      </span>
    {% endif %}

    {% if feature.disallowServiceWorkers %}
      <span class="aside--gotchas tag-pill type--label rounded-lg" title="Not available in Service Workers">
        Foreground only
      </span>
    {% endif %}

    {% if feature.deprecated %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Deprecated
        {%- if feature.deprecated.since %}
          since {{ feature.deprecated.since }}
        {%- endif -%}
      </span>
    {% endif %}
  {% endset %}

  {% if inner | trim %}
    <div class="cluster flow-space-100 {{ extraClass }}">
      <div>{{ inner | trim | safe }}</div>
    </div>
  {% endif %}

{% endmacro %}
