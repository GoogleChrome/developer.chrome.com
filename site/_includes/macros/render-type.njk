
{#
  Top-level rendering of a DeclarationReflection from TypeDoc.
#}
{% macro renderTopLevel(node, prefix) %}

  {% set type = node.type %}

<div class="type stack">
  <h3 id="{{ prefix }}-{{ node.name }}">{{ node.name }}</h3>

{% if node._method %}
  {# Render the method signature. #}
  <span class="code-sections__callback type--xsmall">
    <code>
      {% if node._event %}
        {{ node.name }}.addListener{{ renderFunctionParameters(node._method.parameters) }}
      {% else %}
        {# TODO: show Promise vs not #}
        {{ node.name }}{{ renderFunctionParameters(node._method.parameters) }}
      {% endif %}
    </code>
  </span>
{% elif node._event %}
  {# This is a declarative event listener as it has no listener function type. #}
  <p>
    Provides the <a href="/docs/extensions/reference/events/#declarative-event-handlers">Declarative Event API</a> consisting of <code>addRules</code>, <code>removeRules</code>, and <code>getRules</code>.
  </p>
{% endif %}

  {{ renderComment(node) }}
</div>

{% if type.type === 'literal' %}
  {# Top-level literal number or string. #}
  <div class="code-sections">
    <h4 class="type--label code-sections__mode">Value</h4>

    <div class="code-sections__overline code-sections__label">
      {{ renderSingleIconType(type) }}
    </div>
  </div>
{% elif type.type === 'intrinsic' %}
  {# Intrinsic type, like 'number' #}
  {{ renderIconTypesArray([type], 'Type') }}

{% elif type.type === 'union' %}
  {# Type that contains many string (probably) options, basically an enum. #}
  {{ renderIconTypesArray(type.types, 'Type') }}

{% endif %}

{{ renderInnerParts(node, true) }}

{% endmacro %}


{#
#}
{% macro renderDeclaration(node, isTopLevel) %}

  <li class="stack">
    <div>
      <div class="code-sections__label">{{ node.name }}</div>
      <div class="type--xsmall">{{ renderSingleIconType(node.type, node) }}</div>
    </div>

    {{ renderComment(node) }}

    {#
      Give a hint of how to use this method. We don't do this in renderComment() as we don't
      want it for methods on the namespace.
    #}
    {% if node._method %}
      {% if isTopLevel %}
        <p>
          {% if node.flags.isOptional %}
            If you specify the <code>{{ node.name }}</code> parameter, it
          {% else %}
            The <code>{{ node.name }}</code> parameter
          {% endif %}
          should be a function that looks like this:
          <span class="code-sections__callback type--xsmall"><code>{{ renderFunctionParameters(node._method.parameters) }} => {...}</code></span>
        </p>
      {% else %}
        {# This is probably a callback given back to the user, so be vague about its usage. #}
        <p>
          The <code>{{ node.name }}</code> parameter looks like:
          <span class="code-sections__callback type--xsmall"><code>{{ renderFunctionParameters(node._method.parameters) }} => {...}</code></span>
        </p>
      {% endif %}
    {% endif %}

    {{ renderInnerParts(node, isTopLevel) }}
  </li>

{% endmacro %}


{#
  Renders the inner contents of reflections that have them. This is just interfaces and functions.
#}
{% macro renderInnerParts(node, isTopLevel) %}

  {% if node.kindString === 'Interface' %}
    {{ renderChildrenTable(node.children, isTopLevel and 'Properties' or '') }}
  {% endif %}

  {# FIXME: flatten this stuff #}
  {% if node.type.type === 'reflection' and node.type.declaration.children %}
    {{ renderChildrenTable(node.type.declaration.children, isTopLevel and 'Properties' or '') }}
  {% endif %}

  {% if node._method %}
    {{ renderChildrenTable(node._method.parameters, isTopLevel and 'Parameters' or '') }}
  {% endif %}

  {# {% elif type.key === 'ref' and type.name === 'events.Event' %}

    {% if type.templates[0].primitiveType === 'void' %}
      {{ renderIconTypesArray(type.templates[1].choices, 'Conditions', prop) }}
      {{ renderIconTypesArray(type.templates[2].choices, 'Actions', prop) }}
    {% else %}
      <div class="code-sections">
        <h4 class="type--label code-sections__mode">Event</h4>
        <ul class="stack">
          {{ internalRenderListenerAsItem(type.templates[0]) }}
        </ul>
      </div> #}

{% endmacro %}


{#
#}
{% macro renderChildrenTable(children, label) %}

  {% if children.length %}
    <div class="code-sections">
      {% if label %}
        <h4 class="type--label code-sections__mode">{{ label }}</h4>
      {% endif %}

      <ul class="stack">
        {% for c in children %}
          {{ renderDeclaration(c) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}

{% endmacro %}


{#
  Renders a single type with its icon and possibly an "optional" hint.
#}
{% macro renderSingleIconType(type, node) %}
  {% set iconType = type.type %}
  {% if type.type === 'intrinsic' %}
    {% set iconType = type.name %}
  {% elif type.type === 'literal' %}
    {% set iconType = type.value | typeof %}
  {% elif type.type === 'reflection' and type.declaration.signatures %}
    {% set iconType = 'function' %}
  {% elif type.type === 'reflection' and type.declaration.children %}
    {% set iconType = 'object' %}
  {% elif type.type === 'reference' %}
    {% set iconType = 'object' %}
  {% endif %}

  {# Note that we avoid whitespace below, and instead set margins in CSS. #}
  <span class="code-sections__icon code-sections__icon--{{ iconType }}">{{ renderSingleType(type) }}
    {%- if node.flags.isOptional -%}
      &nbsp;<span class="code-sections__optional">optional</span>
    {%- endif -%}
  </span>

{% endmacro %}



{#
  Renders an optional list of types, e.g., for an enum.
#}
{% macro renderIconTypesArray(types, label) %}

  <div class="code-sections">
    {% if label %}
      <h4 class="type--label code-sections__mode">{{ label }}</h4>
    {% endif %}

    <div class="code-sections__overline code-sections__label">
      <p>
        {% for t in types %}
          {% if loop.last and not loop.first %}or{% endif %}
          <span style="white-space: nowrap">
            {{ renderSingleIconType(t) | trim }}{% if not loop.last %},{% endif %}
          </span>
        {% endfor %}
      </p>
    </div>
  </div>

{% endmacro %}


{#
  Renders a comment, its optional availability information and deprecation notice.
#}
{% macro renderComment(node) %}
  {{ renderAvailability(node, 'pad-top-200') }}
  {{ renderCommentText(node) }}
{% endmacro %}


{#
  Renders the text parts of a comment, its optional availability information and deprecation notice.
#}
{% macro renderCommentText(node, skipMethod) %}
  {% set f = node._feature %}
  {% if f.deprecated.value %}
    <p class="code-sections__deprecated">{{ f.deprecated.value | mdInline | safe }}<p>
  {% endif %}

  {# This |md filter will add <p> as appropriate. #}
  {{ node.comment.shortText | md | safe }}
  {{ node.comment.text | md | safe }}

  {# Display enum information from Chrome's source. #}
  {% set enumInfoHtml %}
    {% for tag in node.comment.tags %}
      {% if tag.tag === 'chrome-enum' %}
        {# TODO: appears as `"foo" description #}
        <li>{{ tag.text | md | safe }}</li>
      {% endif %}
    {% endfor %}
  {% endset %}
  {% if enumInfoHtml | trim %}
    <ul>{{ enumInfoHtml | safe }}</ul>
  {% endif %}
{% endmacro %}




{#
  Renders a single model.Type as a single word. Used for signatures and type hints.
#}
{% macro renderSingleType(type) %}
  {% set iconType = type.type %}

  {% if not type %}
    {# Should never happen #}
    ?

  {% elif type.type === 'intrinsic' %}
    {# Primitive type, e.g. "number" or "void" #}
    {{ type.name }}

  {% elif type.type === 'literal' %}
    {# Literal value, e.g., 123 or '"foo"' #}
    <span class="code-sections__value">{{ type.value | dump }}</span>

  {% elif type.type === 'reflection' and type.declaration.signatures %}
    {# A reflection which has signatures, i.e., a function. #}
    function

  {% elif type.type === 'reflection' and type.declaration.children %}
    {# A reflection which has children, i.e., an inline type. #}
    object

  {% elif type.type === 'reference' %}
    {# Reference to another type (internal or external) #}

    {# TODO: doesn't work #}
    {% set link = type.name | modelToHref %}
    {% if link %}
      <a href="{{ link }}">{{ type.name }}</a>
    {%- else %}
      {{ type.name }}
    {%- endif %}

    {%- if type.typeArguments.length -%}
      &lt;
        {%- for t in type.typeArguments -%}
          {{ renderSingleType(t) | trim }}
        {%- endfor -%}
      &gt;
    {% endif %}

  {% elif type.type === 'array' %}
    {% set inner %}{{ renderSingleType(type.elementType) | trim }}{% endset %}

    {% if type.elementType.type === 'intersection' or type.elementType.type === 'union' %}
      {# This is an array of something which itself needs wrapping. #}
      ({{ inner }})[]
    {% else %}
      {# This is an array of a boring type. #}
      {{ inner }}[]
    {% endif %}

  {% elif type.type === 'intersection' %}
    {# A number of choices with `|` #}
    {%- for t in type.types -%}
      {{ renderSingleType(t) | trim }}{%- if not loop.last %} | {% endif -%}
    {%- endfor -%}

  {% elif type.type === 'union' %}
    {# A number of choices with `&` #}
    {%- for t in type.types -%}
      {{ renderSingleType(t) | trim }}{%- if not loop.last %} & {% endif -%}
    {%- endfor -%}

  {% else %}
    {# This is a fallback display but won't render a sensible type that looks like TS. #}
    {{ type.type }}
  {% endif %}

{% endmacro %}


{#
  Renders the arguments of a method including ()'s. Expects typedoc.JSONOutput.ParameterReflection[].
#}
{% macro renderFunctionParameters(parameters) -%}
  (
    {%- for p in parameters -%}
      {{ p.name }}{% if p.flags.isOptional %}?{% endif %}:
      <span class="color-cyan-medium">{{ renderSingleType(p.type) | trim }}</span>
      {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
  )
{%- endmacro %}

{#
  Renders a short summary of the passed RenderGroup. Used in the summary section of a namespace.
#}
{% macro renderGroupSummary(group) %}
  <li>
    <div class="code-sections__label">{{ group.title }}</div>
    <div>
      {% for node in group.contents %}
        <div><a href="#{{ group.prefix }}-{{ node.name }}" class="link weight-medium">{{ node.name }}</a></div>
      {% endfor %}
    </div>
  </li>
{% endmacro %}

{#
  Renders the contents of the passed group, including heading.
#}
{% macro renderGroupAll(group) %}

  <h2 class="type--h3" id="{{ group.prefix }}">{{ group.title }}</h2>
  <div class="stack flow-space-300">
  {% for node in group.contents %}
    {{ renderTopLevel(node, group.prefix) }}
  {% endfor %}
  </div>

{% endmacro %}

{#
  Renders API availability information based on feature information (this is type `ExtendedDeclarationReflection`).
  This is used for both top-level namespaces as well as specific APIs. This does not render
  permissions.

  This returns valid HTML, so it should be rendered with `| safe`.
#}
{% macro renderAvailability(ext, extraClass) %}
  {% set feature = ext._feature %}

  {% set inner %}
    {# TODO: expand #}
    {% if ext.type.isReturnsAsync %}
      <span class="aside--success tag-pill type--label rounded-lg" title="Can return its result via Promise">
        Promise
      </span>
    {% endif %}

    {% if feature.channel === 'dev' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Dev channel
      </span>
    {% elif feature.channel === 'beta' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Beta channel
      </span>
    {% elif feature.channel === 'canary' or feature.channel === 'trunk' %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        In development
      </span>
    {% elif feature.since and feature.since.startsWith('Chrome') %}
      <span class="aside--default tag-pill type--label rounded-lg" title="Available from this Chrome version and higher">
        {{ feature.since }}+
      </span>
    {% elif feature.since %}
      {# This is stable but not yet visible in the version history data. It's probably coming next
        Chrome release. #}
      <span class="aside--warning tag-pill type--label rounded-lg" title="Availability data">
        {{ feature.since }}
      </span>
    {% endif %}

    {% if feature.chromeOsOnly %}
      <span class="aside--key-term tag-pill type--label rounded-lg">
        Chrome OS only
      </span>
    {% endif %}

    {% if feature.maxManifest %}
      <span class="aside--caution tag-pill type--label rounded-lg" title="Maximum manifest vesion">
        &leq;{{ feature.maxManifest }}
      </span>
    {% endif %}
    {% if feature.minManifest %}
      <span class="aside--gotchas tag-pill type--label rounded-lg" title="Minimum manifest version">
        {{ feature.minManifest }}+
      </span>
    {% endif %}

    {% if feature.disallowServiceWorkers %}
      <span class="aside--gotchas tag-pill type--label rounded-lg" title="Not available in Service Workers">
        Foreground only
      </span>
    {% endif %}

    {% if feature.deprecated %}
      <span class="aside--warning tag-pill type--label rounded-lg">
        Deprecated
        {%- if feature.deprecated.since %}
          since {{ feature.deprecated.since }}
        {%- endif -%}
      </span>
    {% endif %}
  {% endset %}

  {% if inner | trim %}
    <div class="cluster flow-space-100 {{ extraClass }}">
      <div>{{ inner | trim | safe }}</div>
    </div>
  {% endif %}

{% endmacro %}
