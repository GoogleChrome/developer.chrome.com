
{#
  Top-level rendering of a type.
#}
{% macro renderTopType(spec, namespaceName) %}

{# Render the function signature. #}
{% if spec.type === 'function' %}
  {{ renderTypeSignature(spec, namespaceName) }}
{% elif spec.referenceType === 'events.Event' %}
  {# This isn't really part of the type but we show users how to add a listener. #}
  <div class="code-sections__signature">
    <code>
      {{ namespaceName }}.{{ spec.name }}.addListener(listener: <span class="code-sections__signature-type">function</span>)
    </code>
  </div>
{% endif %}

<div class="type stack code-sections__description">
  {{ renderComment(spec) }}
</div>

{# OPTION: enum #}
{# This is just a union but we render it specially. #}
{% if spec.type === 'union' and spec.isEnum %}
  <div class="code-sections">
    <h4 class="type--label case-upper">Enum</h4>

    <div class="code-sections__overline code-sections__label">
      <p>
        {% for option in spec.options %}
          {% if loop.last and not loop.first %}or{% endif %}
          <code>{{ option.literalValue }}</code>{% if not loop.last %},{% endif %}
        {% endfor %}
      </p>
    </div>
  </div>

{# OPTION: function #}
{% elif spec.type === 'function' %}

  {% if spec.parameters and spec.parameters.length %}
    <div class="code-sections">
      <h4 class="type--label case-upper">Parameters</h4>

      <ul class="stack flow-space-300">
        {% for parameter in spec.parameters %}
          {{ internalRenderNamedType(parameter, namespaceName, spec) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}
  {% if spec.returnType %}
    <div class="code-sections">
      <h4 class="type--label case-upper">Returns</h4>

      <ul class="stack flow-space-300">
        {{ internalRenderNamedType(spec.returnType, namespaceName, spec) }}
      </ul>
    </div>
  {% endif %}

{# OPTION: event #}
{% elif spec.referenceType === 'events.Event' %}
  <div class="code-sections">
    <h4 class="type--label case-upper">Event</h4>

    {# TODO(samthor): The old code shows information on filters. #}

    <ul class="stack flow-space-300">
      {{ internalRenderNamedType(spec.referenceTemplates[0], namespaceName, spec) }}
    </ul>
  </div>

{# OPTION: literal #}
{% elif spec.literalValue !== undefined %}
  <div class="code-sections">
    <h4 class="type--label case-upper">Value</h4>

    <div class="code-sections__overline code-sections__label">
      {{ renderSingleType(spec, true) }}
    </div>
  </div>

{# OPTION: type or object #}
{% elif spec.type === 'object' or spec.type === 'type' %}
  {# Ignore, we render properties below #}

{% else %}
  <div class="code-sections">
    <h4 class="type--label case-upper">Type</h4>

    <div class="code-sections__overline code-sections__label">
      {{ renderSingleType(spec, true) }}
    </div>
  </div>

{% endif %}

{# Render properties, as they show up on different types. #}
{% if spec.properties.length %}
  <div class="code-sections">
    <h4 class="type--label case-upper">Properties</h4>

    <ul class="stack flow-space-300">
      {% for prop in spec.properties %}
        {{ internalRenderNamedType(prop, namespaceName, spec) }}
      {% endfor %}
    </ul>
  </div>
{% endif %}

{% endmacro %}

{#
  Renders a comment, its optional version information and deprecation notice.
#}
{% macro renderComment(spec) %}
  {% if spec.version.unknown %}
    <p class="code-sections__deprecated">This API is in active development.</p>
  {% endif %}
  {% if spec.version.low %}
    <p class="code-sections__deprecated">Since Chrome {{ spec.version.low }}.</p>
  {% endif %}
  {% if spec.deprecatedComment !== undefined or spec.version.deprecated %}
    <p class="code-sections__deprecated">
      <strong>
        Deprecated
        {%- if spec.version.deprecated > 0 %}
          since Chrome {{ spec.version.deprecated }}
        {%- endif -%}
      </strong>.
      {{ spec.deprecatedComment | safe }}
    </p>
  {% endif %}
  {{ spec.comment | safe }}
{% endmacro %}

{#
  Renders a <li> with the type's name and description. This is used for parts of a top-level type.
#}
{% macro internalRenderNamedType(spec, namespaceName, parent) %}
<li>
  <div>
    <div class="code-sections__label">{{ spec.name }}</div>
    <div class="type--xsmall">{{ renderSingleType(spec, true) }}</div>
  </div>
  <div class="stack">

<div class="type stack code-sections__description">
  {{ renderComment(spec) }}

  {% if spec.type === 'function' and (spec.name === 'callback' or parent.referenceType === 'events.Event') %}
    {# This is a callback or a listener. Tell the user how to specify it. #}
    <p>
      {% if spec.optional %}
        If you specify the {{ spec.name }} parameter, it
      {% else %}
        The {{ spec.name }} parameter
      {% endif %}
      should be a function that looks like this:
    </p>
    {% set functionPart %}
      {{ renderTypeSignatureParameters(spec, namespaceName) }} => {...}
    {% endset %}
  {% elif spec.type === 'function' %}
    {# This is a function, often given to the user. It's ambiguous how it will
       be called, so just show its signature. #}
    <p>
      The {{ spec.name }} function looks like this:
    </p>
    {% set functionPart %}
      {{ spec.name }}{{ renderTypeSignatureParameters(spec, namespaceName) }}
      {%- if spec.returnType %}: {{ renderSingleType(spec.returnType) }}{% endif %}
      => {...}
    {% endset %}
  {% elif spec.referenceType === 'events.Event' %}
    {# This is an event, so tell folks how to use `addListener`. #}
    <p>
      Add a listener like this:
    </p>
    {% set functionPart %}
      {{ spec.name }}.addListener(listener)
    {% endset %}
  {% endif %}
</div>

{% if functionPart %}
  <div class="code-sections__callback type--xsmall"><code>{{ functionPart | safe }}</code></div>
{% endif %}

{# OPTION: array #}
{% if spec.type === 'array' %}
  {# Render further information about the contained type. #}
  {% set spec = spec.elementType %}
{% endif %}

{# OPTION: type (class) or object (property) #}
{% if spec.type === 'type' or spec.type === 'object' %}
  {% if spec.properties.length %}
    <div class="code-sections">
      <ul class="stack flow-space-300">
        {% for property in spec.properties %}
          {{ internalRenderNamedType(property, namespaceName, spec) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}

{# OPTION: function #}
{% elif spec.type === 'function' %}
  {% if spec.parameters.length or spec.returnType %}
    <div class="code-sections">
      <ul class="stack flow-space-300">
        {% for parameter in spec.parameters %}
          {{ internalRenderNamedType(parameter, namespaceName, spec) }}
        {% endfor %}
        {% if spec.returnType %}
          {{ internalRenderNamedType(spec.returnType, namespaceName, spec) }}
        {% endif %}
      </ul>
    </div>
  {% endif %}

{# OPTION: event #}
{% elif spec.referenceType === 'events.Event' %}
  <div class="code-sections">
    <ul class="stack flow-space-300">
      {{ internalRenderNamedType(spec.referenceTemplates[0], namespaceName, spec) }}
    </ul>
  </div>

{% endif %}

  </div>
</li>
{% endmacro %}

{#
  Renders a single type as a single word. Used for signatures and type hints.

  If isOuter is true, shows a hint icon, because it's the left-most type inside
  a table view.
#}
{% macro renderSingleType(rt, isOuter) %}

{% set iconType = rt.type %}
{% set stringType %}
  {% if rt.type === 'primitive' %}
    {% if rt.primitiveType %}
      {% set iconType = rt.primitiveType %}
    {% endif %}

    {# Primitive value ("number") or literal ("abc") #}
    {{ rt.primitiveType }}
    {% if rt.literalValue %}
      <span class="code-sections__value">{{ rt.literalValue }}</span>
    {% endif %}
  {% elif rt.type === 'reference' %}
    {# Reference to another type #}
    {% if rt.referenceLink  %}
      <a class="link weight-medium" href="{{ rt.referenceLink }}">{{ rt.referenceType }}</a>
    {%- else %}
      {# There's no link, so use the object icon. #}
      {% set iconType = 'object' %}
      {{ rt.referenceType }}
    {%- endif -%}
    {%- if rt.referenceTemplates.length -%}
      &lt;
        {%- for t in rt.referenceTemplates -%}
          {{ renderSingleType(t) | trim }}
        {%- endfor -%}
      &gt;
    {% endif %}
  {% elif rt.type === 'array' %}
    {{ renderSingleType(rt.elementType) | trim }}[]
  {% elif rt.isEnum %}
    {# Union type that is actually an enum of primitives #}
    enum
  {% elif rt.type === 'union' %}
    {% for t in rt.options %}
      {{ renderSingleType(t) | trim }}{% if not loop.last %} | {% endif %}
    {% endfor %}
  {% else %}
    {{ rt.type }}
  {% endif %}
{% endset %}

{# Note that we avoid whitespace below, and instead set margins in CSS. #}
{% if isOuter %}
  <div class="display-inline-flex align-center flex-flow-row-wrap code-sections__type">
    <span class="code-sections__icon code-sections__icon--{{ iconType }}">{{ stringType | safe | trim }}</span>
    {% if rt.optional %}
      <span class="code-sections__optional">optional</span>
    {% endif %}
  </div>
{% else %}
  <span>{{ stringType | safe | trim }}</span>
{% endif %}

{% endmacro %}

{#
  If the passed RenderType is a function, then render its full signature. Does nothing otherwise.
#}
{% macro renderTypeSignature(rt, namespaceName) %}

  {% if rt.type === 'function' %}
    <div class="code-sections__signature">
      <code>
        {{ namespaceName }}.{{ rt.name }}{{ renderTypeSignatureParameters(rt, namespaceName) }}
        {%- if rt.returnType %}: {{ renderSingleType(rt.returnType) }}{% endif %}
      </code>
    </div>
  {% endif %}

{% endmacro %}

{#
  Renders the arguments of a method including ()'s. This assumes the passed RenderType is
  a function.
#}
{% macro renderTypeSignatureParameters(rt, namespaceName) -%}
  (
    {%- for parameter in rt.parameters -%}
      {{ parameter.name }}{% if parameter.optional %}?{% endif %}:
      <span class="code-sections__signature-type">{{ renderSingleType(parameter) | trim }}</span>
      {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
  )
{%- endmacro %}

{#
  Renders a short summary of the passed RenderType[]. Used at the top of a namespace page.
#}
{% macro renderSummarySection(namespaceName, label, prefix, array) %}

  {% if array.length %}
    <li>
      <div class="code-sections__label">{{ label }}</div>
      <div>
        {% for rt in array %}
          <div><a href="#{{ prefix }}-{{ rt.name }}" class="link weight-medium">{{ rt.name }}</a></div>
          {{ renderTypeSignature(rt, namespaceName) }}
        {% endfor %}
      </div>
    </li>
  {% endif %}

{% endmacro %}

{#
  Renders the whole list of the passed RenderType[].
#}
{% macro renderPrimarySection(namespaceName, id, label, prefix, array) %}

  {% if array.length %}
    <h2 class="type--h3" id="{{ id }}">{{ label }}</h2>
    {% for rt in array %}
      <div>
        <h3 class="type--h4" id="{{ prefix }}-{{ rt.name }}">{{ rt.name }}</h3>
        {{ renderTopType(rt, namespaceName, true) }}
      </div>
    {% endfor %}
  {% endif %}

{% endmacro %}
